export const ABI_INDEX_TS: string = `/* Autogenerated file. Do not edit manually. */
{{#contracts}}
export const {{contractName}}ABI = {{&abi}};

{{/contracts}}
export default { {{#contracts}}{{contractName}}ABI, {{/contracts}}};
`;

export const DEPLOYED_INDEX_TS: string = `/* Autogenerated file. Do not edit manually. */
{{#contractsWithDeployedAddress}}
{{#addresses}}
export const {{network}}{{contractName}}Addr = "{{address}}";
{{/addresses}}

{{/contractsWithDeployedAddress}}
export default { {{#contractsWithDeployedAddress}}{{#addresses}}{{network}}{{contractName}}Addr, {{/addresses}}{{/contractsWithDeployedAddress}}};
`;

export const INDEX_TS: string = `/* Autogenerated file. Do not edit manually. */
import { Contract } from "ethers";

{{#contracts}}
import type { {{contractName}} } from "./{{&importPath}}";
{{/contracts}}

import abi from "./abi";
{{#configs.includeDeployed}}

import deployed from "./deployed";
{{/configs.includeDeployed}}
{{#contracts}}

export namespace {{contractName}}Contract {
    export function at(address: string): {{contractName}} {
        return new Contract(address, abi.{{contractName}}ABI, null) as unknown as {{contractName}};
    }
    {{#configs.includeDeployed}}
    {{#addresses}}
    
    export function at{{network}}(): {{contractName}} {
        return new Contract(deployed.{{network}}{{contractName}}Addr, abi.{{contractName}}ABI, null) as unknown as {{contractName}};
    }
    {{/addresses}}
    {{/configs.includeDeployed}}
}
{{/contracts}}`;

export const TS_CONFIG_JSON: string = `{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "declaration": true,
    "outDir": "./lib/esm",
    "rootDir": "./src",
    "strict": true,
    "lib": ["ES6", "DOM"],
    "moduleResolution": "node",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "sourceMap": false
  },
  "exclude": ["node_modules", "lib", "dist"]
}
`;

export const PACKAGE_JSON: string = `{
  "name": "{{&name}}",
  "version": "{{&version}}",
  "homepage": "{{&homepage}}",
  "repository": "{{&repository}}",
  "publishConfig": {
    "access": "public",
    "registry": "https://registry.npmjs.org/"
  },
  "main": "lib/cjs/index.js",
  "module": "./lib/esm/index.js",
  "types": "./lib/esm/index.d.ts",
  "files": [
    "lib",
    "dist",
    "package.json",
    "README.md",
    "LICENSE"
  ],
  "scripts": {
    "package": "npm run build && npm run dist",
    "build": "npm run build:esm && npm run build:cjs",
    "build:esm": "tsc",
    "build:cjs": "tsc --module commonjs --outDir lib/cjs",
    "dist": "npm run dist:esm && npm run dist:iife",
    "dist:esm": "esbuild src/index.ts --bundle --minify --target=esnext --format=esm --platform=browser --outfile=dist/esm/index.min.js",
    "dist:iife": "esbuild src/index.ts --bundle --minify --target=esnext --format=iife --platform=browser --global-name={{iifeGlobalObjectName}}js --footer:js=\\"var {{iifeGlobalObjectName}} = {{iifeGlobalObjectName}}js.default;\\" --outfile=dist/iife/index.min.js"
  },
  "dependencies": {
    "ethers": "^6.7.1"
  },
  "devDependencies": {
    "esbuild": "^0.19.4",
    "typescript": "^5.2.2"
  }
}`;

export const README_MD: string = `> Autogenerated file. Do not edit manually.

## {{configs.name}}

#### Install

\`\`\`
$ npm install {{configs.name}}@{{configs.version}}
\`\`\`

#### Contracts

{{#contracts}}
* {{contractName}}
{{/contracts}}

{{#configs.includeDeployed}}
#### Deployed Addresses

{{#contractsWithDeployedAddress}}
* {{contractName}}
    {{#addresses}}
    - {{network}}: {{address}}
    {{/addresses}}
{{/contractsWithDeployedAddress}}

{{/configs.includeDeployed}}
#### Usage Example

we can import contract's typescript type definition and abi, and then use them to create a contract instance and interactive with on-chain contracts using the instance:

\`\`\`
import { {{contract.contractName}} } from "{{configs.name}}/lib/{{&contract.importPath}}";
import { {{contract.contractName}}ABI } from "{{configs.name}}/lib/abi";

const contract: {{contract.contractName}} = new ethers.Contract("0xAb...yZ", {{contract.contractName}}ABI, provider) as unknown as {{contract.contractName}};
\`\`\`

or, we can create a contract instance use \`at(address)\` directly and interactive with on-chain contracts using the instance:

\`\`\`
import { {{contract.contractName}} } from "{{configs.name}}/lib/{{&contract.importPath}}";
import { {{contract.contractName}}Contract } from "{{configs.name}}";

const contract: {{contract.contractName}} = {{contract.contractName}}Contract.at("0xAb...yZ").connect(provider);
\`\`\`

if you are using \`hardhat-deployed-records\` plugin and config \`includeDeployed: true\`, you can create a contract instance use \`at[network]()\` with builtin **contract address** from this package:

\`\`\`
import { {{contract.contractName}} } from "{{configs.name}}/lib/{{&contract.importPath}}";
import { {{contract.contractName}}Contract } from "{{configs.name}}";

const contract: {{contract.contractName}} = {{contract.contractName}}Contract.at{{network}}().connect(provider);
\`\`\``;

export const NPMRC_NPM = `//registry.npmjs.org/:_authToken={{authToken}}`;
export const NPMRC_GHP = `//npm.pkg.github.com/:_authToken={{authToken}}`;
